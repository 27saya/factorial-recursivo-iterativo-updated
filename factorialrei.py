# -*- coding: utf-8 -*-
"""factorial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17wYcOPdrXBeJ3oXv_1LT-GWzqqdXX6lZ
"""

pip install memory_profiler matplotlib

import time
import matplotlib.pyplot as plt
from memory_profiler import memory_usage

#Recursivo
def facto_r(n):
    if n<=1:
        return 1
    else:
        return n*facto_r(n-1)

#Iterativo
def facto_i(n):
    resultado=1
    for i in range(2, n+1):
        resultado*= i
    return resultado

def medir(func, n):
    inicio_t=time.perf_counter()
    mem_inicial=memory_usage()[0]
    func(n)
    mem_final=memory_usage()[0]
    fin_t=time.perf_counter()
    tiempo=fin_t-inicio_t
    memoria=mem_final-mem_inicial
    return tiempo, memoria

valores_n=[5, 50, 100, 200, 300, 500]
tiempos_r, tiempos_i=[], []
memorias_r, memorias_i=[], []

for n in valores_n:
    t_r, m_r=medir(facto_r, n)
    t_i, m_i=medir(facto_i, n)
    tiempos_r.append(t_r)
    tiempos_i.append(t_i)
    memorias_r.append(m_r)
    memorias_i.append(m_i)
    
plt.figure(figsize=(8, 5))
plt.plot(valores_n, tiempos_r, marker='o', label="Recursivo")
plt.plot(valores_n, tiempos_i, marker='s', label="Iterativo")
plt.title("Comparación de tiempo de ejecución")
plt.xlabel("Valor de n")
plt.ylabel("Tiempo (segundos)")
plt.legend()
plt.grid(True)
plt.show()
plt.close()



plt.figure(figsize=(8, 5))
plt.plot(valores_n, memorias_r, marker='o', label="Recursivo")
plt.plot(valores_n, memorias_i, marker='s', label="Iterativo")
plt.title("Comparación de uso de memoria")
plt.xlabel("Valor de n")
plt.ylabel("Memoria usada (mb)")
plt.legend()
plt.grid(True)
plt.show()
plt.close()
print("Hecho :D")